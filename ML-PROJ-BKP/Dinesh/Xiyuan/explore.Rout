
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd("/home/xiyuansu/stat502_project/Xiyuan")
> 
> require(ggplot2) # for data visualization
Loading required package: ggplot2
> require(stringr) #extracting string patterns
Loading required package: stringr
> require(Matrix) # matrix transformations
Loading required package: Matrix
> require(glmnet) # ridge, lasso & elastinet
Loading required package: glmnet
Loading required package: foreach
Loaded glmnet 2.0-5

> require(xgboost) # gbm
Loading required package: xgboost
> require(randomForest)
Loading required package: randomForest
randomForest 4.6-12
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

> require(Metrics) # rmse
Loading required package: Metrics

Attaching package: ‘Metrics’

The following object is masked from ‘package:glmnet’:

    auc

> require(dplyr) # load this in last so plyr doens't overlap it
Loading required package: dplyr

Attaching package: ‘dplyr’

The following object is masked from ‘package:randomForest’:

    combine

The following object is masked from ‘package:xgboost’:

    slice

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> require(caret) # one hot encoding
Loading required package: caret
Loading required package: lattice
> require(scales) # plotting $$
Loading required package: scales
> require(e1071) # skewness
Loading required package: e1071
> require(corrplot) # correlation plot
Loading required package: corrplot
> require(Boruta)
Loading required package: Boruta
Loading required package: ranger

Attaching package: ‘ranger’

The following object is masked from ‘package:randomForest’:

    importance

> 
> 
> 
> train=read.csv("/home/xiyuansu/stat502_project/Data/train.csv")
> test = read.csv("/home/xiyuansu/stat502_project/Data/test.csv")
> 
> dim(train) #10000    21
[1] 10000    21
> dim(test) #11613    21
[1] 11613    21
> 
> 
> str(train)
'data.frame':	10000 obs. of  21 variables:
 $ property     : num  5.47e+09 7.20e+09 7.53e+09 2.59e+09 7.74e+09 ...
 $ date         : int  20140502 20140502 20140502 20140502 20140502 20140502 20140502 20140502 20140502 20140502 ...
 $ price        : num  342000 550000 335000 482000 463000 1400000 365000 1200000 243000 285000 ...
 $ bedrooms     : int  3 4 2 4 3 4 3 5 3 4 ...
 $ bathrooms    : num  2 2.5 2 2.5 1.75 2.5 1 2.75 1.5 2.5 ...
 $ sqft_living  : int  1930 1940 1350 2710 1710 2920 1090 2910 1200 2200 ...
 $ sqft_lot     : int  11947 10500 2560 35868 7320 4000 6435 9480 9720 9397 ...
 $ floors       : num  1 1 1 2 1 1.5 1 1.5 1 2 ...
 $ waterfront   : int  0 0 0 0 0 0 0 0 0 0 ...
 $ view         : int  0 0 0 0 0 0 0 0 0 0 ...
 $ condition    : int  4 4 3 3 3 5 4 3 4 3 ...
 $ grade        : int  8 7 8 9 7 8 7 8 7 8 ...
 $ sqft_above   : int  1930 1140 1350 2710 1710 1910 1090 2910 1200 2200 ...
 $ sqft_basement: int  0 800 0 0 0 1010 0 0 0 0 ...
 $ yr_built     : int  1966 1976 1976 1989 1948 1909 1955 1939 1965 1987 ...
 $ yr_renovated : int  0 0 0 0 0 0 0 0 0 0 ...
 $ zipcode      : int  98042 98052 98052 98038 98155 98105 98106 98105 98042 98001 ...
 $ lat          : num  47.4 47.7 47.6 47.4 47.8 ...
 $ long         : num  -122 -122 -122 -122 -122 ...
 $ sqft_living15: int  2200 2200 1790 2780 2260 2470 1340 2940 1380 2310 ...
 $ sqft_lot15   : int  12825 10500 2560 36224 8839 4000 6435 6600 10284 9176 ...
> 
> 
> #random forest
> # fit.rf <- randomForest(price~., data=train, importance=TRUE)
> # imp.rf <- varImp(fit.rf)
> 
> 
> # Overall
> # property        6.4670191
> # date            0.9065502
> # bedrooms        6.0421826
> # bathrooms       6.5100015
> # sqft_living    29.0671704
> # sqft_lot       18.2804637
> # floors          8.8741531
> # waterfront     23.0129720
> # view           10.0188907
> # condition      10.9109650
> # grade          33.2313801
> # sqft_above     18.2991382
> # sqft_basement   7.0748873
> # yr_built       27.3150073
> # yr_renovated    0.4992177
> # zipcode        30.5908333
> # lat           118.4975169
> # long           47.6380478
> # sqft_living15  27.3023131
> # sqft_lot15     18.6771284
> 
> 
> 
> 
> #linear model
> # fit.lm<-lm(price~., data=train)
> # imp.lm <- varImp(fit.lm)
> 
> #boosted tree
> # X <- subset(train, select=-price)
> # fit.bst <- xgboost(data.matrix(X), train$price, nrounds=200)
> # imp.bst <- xgb.importance(model = fit.bst, feature_names = names(X))
> # 
> # fit.bt <- Boruta(price~. , data=train)
> # print(fit.bt)
> # Boruta performed 83 iterations in 34.55251 mins.
> # 19 attributes confirmed important: bathrooms, bedrooms, condition, floors, grade and 14 more;
> # 1 attributes confirmed unimportant: date;
> # plot(fit.bt)
> 
> # property          date      bedrooms     bathrooms   sqft_living      sqft_lot 
> # Confirmed      Rejected     Confirmed     Confirmed     Confirmed     Confirmed 
> # floors    waterfront          view     condition         grade    sqft_above 
> # Confirmed     Confirmed     Confirmed     Confirmed     Confirmed     Confirmed 
> # sqft_basement      yr_built  yr_renovated       zipcode           lat          long 
> # Confirmed     Confirmed     Confirmed     Confirmed     Confirmed     Confirmed 
> # sqft_living15    sqft_lot15 
> # Confirmed     Confirmed 
> # Levels: Tentative Confirmed Rejected
> 
> #sort by importance
> 
> # rf_varimpt <- as.matrix(rf_varimpt)
> # 
> # rf_varimpt <- rf_varimpt[order(rf_varimpt[,2]), ]
> # 
> # xtable(rf_varimpt)
> # 
> # 
> # lm_varimpt <- as.matrix(lm_varimpt)
> # lm_varimpt <- lm_varimpt[order(lm_varimpt[,2]), ]
> # 
> # 
> # xtable(lm_varimpt)
> # 
> # xtable(boruta_decision)
> 
> # Look at variables not rejected by Boruta.
> # keep <- names(fit.bt$finalDecision[fit.bt$finalDecision != 'Rejected'])
> # length(keep)
> 
> # Deal with factor indicators -- take max rank over factor levels.
> # lmranks <- rank(-imp.lm$Overall)
> # lmnames <- rownames(imp.lm)
> # maxrank <- sapply(keep, function(i) {
> #   hits <- sapply(lmnames, function(j) grepl(i, j))
> #   if (sum(hits) == 0)
> #     return(NA)
> #   if (sum(hits) == 1) {
> #     sel <- (lmnames == i)
> #     if (sum(sel) == 0)
> #       return(NA)
> #     return(lmranks[sel])
> #   }
> #   levs <- lmnames[hits]
> #   idx <- lmnames %in% levs
> #   res <- max(lmranks[idx])
> #   return(res)
> # })
> # 
> # ranks <- c(scale(unlist(maxrank)), 
> #            scale(rank(-imp.rf$Overall)), 
> #            scale(rank(-imp.bst$Gain)))
> # vars <- c(names(maxrank), rownames(imp.rf), imp.bst$Feature)
> # method <- rep(c('LM', 'RanForest', 'xgB'),  c(length(maxrank), nrow(imp.rf), nrow(imp.bst)))
> # pd <- data.frame(normalizedRank = ranks, vars, method)
> 
> # normalizedRank          vars    method
> # 1      1.41409135      property        LM
> # 2     -0.60871482      bedrooms        LM
> # 3     -0.10301328     bathrooms        LM
> # 4      1.24552417   sqft_living        LM
> # 5      1.07695699      sqft_lot        LM
> # 6      0.90838981        floors        LM
> # 7     -1.11441637    waterfront        LM
> # 8     -0.77728200          view        LM
> # 9      0.06555390     condition        LM
> # 10    -1.45155073         grade        LM
> # 11     0.40268827    sqft_above        LM
> # 12             NA sqft_basement        LM
> # 13    -1.28298355      yr_built        LM
> # 14     0.57125545  yr_renovated        LM
> # 15    -0.44014764       zipcode        LM
> # 16    -1.62011791           lat        LM
> # 17    -0.27158046          long        LM
> # 18     1.24552417 sqft_living15        LM
> # 19     0.73982263    sqft_lot15        LM
> # 20     1.09870053      property RanForest
> # 21     1.43676223          date RanForest
> # 22     1.26773138      bedrooms RanForest
> # 23     0.92966968     bathrooms RanForest
> # 24    -0.92966968   sqft_living RanForest
> # 25     0.08451543      sqft_lot RanForest
> # 26     0.59160798        floors RanForest
> # 27    -0.42257713    waterfront RanForest
> # 28     0.42257713          view RanForest
> # 29     0.25354628     condition RanForest
> # 30    -1.26773138         grade RanForest
> # 31    -0.08451543    sqft_above RanForest
> # 32     0.76063883 sqft_basement RanForest
> # 33    -0.76063883      yr_built RanForest
> # 34     1.60579308  yr_renovated RanForest
> # 35    -1.09870053       zipcode RanForest
> # 36    -1.60579308           lat RanForest
> # 37    -1.43676223          long RanForest
> # 38    -0.59160798 sqft_living15 RanForest
> # 39    -0.25354628    sqft_lot15 RanForest
> # 40    -1.60579308   sqft_living       xgB
> # 41    -1.43676223         grade       xgB
> # 42    -1.26773138           lat       xgB
> # 43    -1.09870053          long       xgB
> # 44    -0.92966968 sqft_living15       xgB
> # 45    -0.76063883    waterfront       xgB
> # 46    -0.59160798      yr_built       xgB
> # 47    -0.42257713          view       xgB
> # 48    -0.25354628    sqft_above       xgB
> # 49    -0.08451543       zipcode       xgB
> # 50     0.08451543      property       xgB
> # 51     0.25354628      sqft_lot       xgB
> # 52     0.42257713          date       xgB
> # 53     0.59160798    sqft_lot15       xgB
> # 54     0.76063883     condition       xgB
> # 55     0.92966968     bathrooms       xgB
> # 56     1.09870053 sqft_basement       xgB
> # 57     1.26773138      bedrooms       xgB
> # 58     1.43676223  yr_renovated       xgB
> # 59     1.60579308        floors       xgB
> 
> 
> 
> # ggplot(subset(pd, vars %in% keep), aes(method, vars)) +
> #   geom_tile(aes(fill = normalizedRank), colour = "white") +
> #   scale_fill_distiller(palette = 'Spectral') +
> #   theme_bw()
> 
> 
> #################################################################################################
> #pre-process training data
> #################################################################################################
> 
> #drop property, date, sqrt_living, view, zipcode, long
> ks_train <- train[,c(-1, -2,-10,-13, -14)]
> 
> #add two more indicator variables: Recently built (>2000) and recently renovated(>1990)
> ks_train$zipcode <- as.factor(ks_train$zipcode)
> 
> for (i in 1:dim(ks_train)[1]){
+   if (ks_train$yr_built[i]>2000) {ks_train$rec_built[i]=1}
+   else {ks_train$rec_built[i]=0}
+ }
> 
> 
> for (i in 1:dim(ks_train)[1]){
+   if (ks_train$yr_renovated[i]>1990) {ks_train$rec_renovated[i]=1}
+   else {ks_train$rec_renovated[i]=0}
+ 
+ }
> 
> 
> ks_train %>%glimpse()
Observations: 10,000
Variables: 18
$ price         <dbl> 342000, 550000, 335000, 482000, 463000, 1400000, 3650...
$ bedrooms      <int> 3, 4, 2, 4, 3, 4, 3, 5, 3, 4, 3, 3, 3, 3, 4, 3, 4, 4,...
$ bathrooms     <dbl> 2.00, 2.50, 2.00, 2.50, 1.75, 2.50, 1.00, 2.75, 1.50,...
$ sqft_living   <int> 1930, 1940, 1350, 2710, 1710, 2920, 1090, 2910, 1200,...
$ sqft_lot      <int> 11947, 10500, 2560, 35868, 7320, 4000, 6435, 9480, 97...
$ floors        <dbl> 1.0, 1.0, 1.0, 2.0, 1.0, 1.5, 1.0, 1.5, 1.0, 2.0, 1.0...
$ waterfront    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
$ condition     <int> 4, 4, 3, 3, 3, 5, 4, 3, 4, 3, 3, 3, 5, 3, 3, 4, 4, 3,...
$ grade         <int> 8, 7, 8, 9, 7, 8, 7, 8, 7, 8, 7, 6, 8, 9, 9, 9, 7, 9,...
$ yr_built      <int> 1966, 1976, 1976, 1989, 1948, 1909, 1955, 1939, 1965,...
$ yr_renovated  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
$ zipcode       <fctr> 98042, 98052, 98052, 98038, 98155, 98105, 98106, 981...
$ lat           <dbl> 47.3672, 47.6830, 47.6344, 47.3750, 47.7512, 47.6578,...
$ long          <dbl> -122.151, -122.114, -122.107, -122.022, -122.281, -12...
$ sqft_living15 <int> 2200, 2200, 1790, 2780, 2260, 2470, 1340, 2940, 1380,...
$ sqft_lot15    <int> 12825, 10500, 2560, 36224, 8839, 4000, 6435, 6600, 10...
$ rec_built     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,...
$ rec_renovated <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
> 
> 
> ##ks_test
> 
> ks_test <- test[,c(-1, -2,-3, -10,-13, -14)]
> 
> ks_test$zipcode <- as.factor(ks_test$zipcode)
> 
> for (i in 1:dim(ks_test)[1]){
+   if (ks_test$yr_built[i]>2000) {ks_test$rec_built[i]=1}
+   else {ks_test$rec_built[i]=0}
+ }
> 
> for (i in 1:dim(ks_train)[1]){
+   if (ks_test$yr_renovated[i]>1990) {ks_test$rec_renovated[i]=1}
+   else {ks_test$rec_renovated[i]=0}
+ 
+ }
> 
> 
> ks_test %>%glimpse()
Observations: 11,613
Variables: 17
$ bedrooms      <int> 3, 5, 3, 2, 3, 4, 3, 3, 4, 4, 4, 3, 3, 4, 5, 4, 4, 4,...
$ bathrooms     <dbl> 1.50, 2.50, 2.25, 1.00, 2.50, 2.00, 1.75, 1.50, 3.00,...
$ sqft_living   <int> 1340, 3650, 2000, 880, 2430, 1520, 2330, 1570, 3110, ...
$ sqft_lot      <int> 7912, 9050, 8030, 6380, 88426, 6200, 14892, 6700, 723...
$ floors        <dbl> 1.5, 2.0, 1.0, 1.0, 1.0, 1.5, 1.0, 1.0, 2.0, 1.0, 1.0...
$ waterfront    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
$ condition     <int> 3, 5, 4, 3, 4, 3, 3, 4, 3, 4, 3, 4, 4, 5, 3, 3, 3, 3,...
$ grade         <int> 7, 10, 8, 7, 7, 7, 8, 7, 8, 7, 8, 8, 8, 7, 8, 8, 7, 8...
$ yr_built      <int> 1955, 1921, 1963, 1938, 1985, 1945, 1980, 1956, 1997,...
$ yr_renovated  <int> 0, 0, 0, 1994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
$ zipcode       <fctr> 98133, 98119, 98008, 98115, 98045, 98115, 98074, 980...
$ lat           <dbl> 47.7658, 47.6345, 47.6188, 47.6924, 47.4828, 47.6780,...
$ long          <dbl> -122.339, -122.367, -122.114, -122.322, -121.718, -12...
$ sqft_living15 <int> 1480, 2880, 2070, 1340, 1560, 1910, 2570, 1570, 2820,...
$ sqft_lot15    <int> 7940, 5400, 8250, 6380, 56827, 6200, 14217, 7300, 731...
$ rec_built     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...
$ rec_renovated <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,...
> 
> #export the customized training data and test data
> 
> write.csv(ks_train, "ks_train.csv", row.names=FALSE)
> 
> write.csv(ks_test, "ks_test.csv", row.names=FALSE)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  5.595   0.311   6.443 
